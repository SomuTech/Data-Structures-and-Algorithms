"""EX-OR and EX-NOR implementation""" 
import numpy as np

def unitStep(v):
    if v>=0:
        return 1
    return 0

def perceptronModel(x,w,b):
    v = np.dot(w,x)+b
    return unitStep(v)

def NOT_LogicFunction(x):
    return perceptronModel(x, -1, 0.5)

def OR_LogicFunction(x):
    w = np.array([1,1])
    return perceptronModel(x,w,-0.5)

def AND_LogicFunction(x):
    w = np.array([1,1])
    return perceptronModel(x,w,-1.5)

def NOR_LogicFunction(x):
    output_OR = OR_LogicFunction(x)
    return NOT_LogicFunction(output_OR)

def NAND_LogicFunction(x):
    output_AND = AND_LogicFunction(x)
    return NOT_LogicFunction(output_AND)

def XNOR_LogicFunction(x):
    y1 = OR_LogicFunction(x)
    y2 = AND_LogicFunction(x)
    y3 = NOT_LogicFunction(y1)
    final_x = np.array([y2, y3])
    return OR_LogicFunction(final_x)

def XOR_LogicFunction(x):
    output_XNOR = XNOR_LogicFunction(x)
    return NOT_LogicFunction(output_XNOR)

tests = [np.array([0,0]), np.array([0,1]), np.array([1,0]), np.array([1,1])]
x,y = [0,0,1,1],[0,1,0,1]

print("======= OR Logic =======")
for i in range(len(tests)):
    print("{}  {} = {}".format(x[i],y[i], OR_LogicFunction(tests[i])))

print("======= AND Logic ======")
for i in range(len(tests)):
    print("{}  {} = {}".format(x[i],y[i], AND_LogicFunction(tests[i])))

print("======= NOR Logic ======")
for i in range(len(tests)):
    print("{}  {} = {}".format(x[i],y[i], NOR_LogicFunction(tests[i])))

print("======= NAND Logic ======")
for i in range(len(tests)):
    print("{}  {} = {}".format(x[i],y[i], NAND_LogicFunction(tests[i])))

print("======= EX-OR Logic ======")
for i in range(len(tests)):
    print("{}  {} = {}".format(x[i],y[i], XOR_LogicFunction(tests[i])))

print("======= EX-NOR Logic ======")
for i in range(len(tests)):
    print("{}  {} = {}".format(x[i],y[i], XNOR_LogicFunction(tests[i])))

"""
OUTPUT:

======= OR Logic =======
0  0 = 0
0  1 = 1
1  0 = 1
1  1 = 1
======= AND Logic ======
0  0 = 0
0  1 = 0
1  0 = 0
1  1 = 1
======= NOR Logic ======
0  0 = 1
0  1 = 0
1  0 = 0
1  1 = 0
======= NAND Logic ======
0  0 = 1
0  1 = 1
1  0 = 1
1  1 = 0
======= EX-OR Logic ======
0  0 = 0
0  1 = 1
1  0 = 1
1  1 = 0
======= EX-NOR Logic ======
0  0 = 1
0  1 = 0
1  0 = 0
1  1 = 1

"""